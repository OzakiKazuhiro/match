# Laravel + React + TypeScriptで作るエンジニアマッチングサービス「match」の開発記録

## はじめに

こんにちは！今回は、エンジニア向けの案件マッチングサービス「match」の開発について、技術的な観点から詳しく解説していきたいと思います。

## プロジェクト概要

「match」は、エンジニアのための案件マッチングプラットフォームです。既存のフリーランス向けサービスの複雑な操作性や煩雑な入力項目を見直し、「エンジニア案件マッチング版のメルカリ」をコンセプトに、シンプルで使いやすいサービスを目指しました。

### 主な機能

#### 認証・ユーザー管理
- ユーザー認証（登録・ログイン・ログアウト）
- パスワードリマインダー機能
- プロフィール管理（アイコン画像、自己紹介文）

#### 案件管理
- 案件投稿（単発案件・レベニューシェア案件）
- 案件一覧・詳細表示
- 案件編集・削除
- 案件の募集終了機能
- カテゴリー別案件検索
- キーワード検索機能

#### 応募・マッチング
- 案件応募機能
- 応募ステータス管理（承認・拒否）
- 自分の応募案件一覧
- 自分の案件への応募管理

#### コミュニケーション
- パブリックメッセージ機能（案件詳細でのオープンな質疑応答）
- ダイレクトメッセージ機能（1対1のプライベートメッセージ）
- メッセージの既読管理
- 会話グループ管理

#### 便利機能
- **お気に入り機能**（気になる案件をブックマーク）
- **メモ機能**（会話ごとの個人メモ）
- **通知機能**（応募・メッセージの通知）
- 案件共有機能（X/Twitter）

#### その他
- 利用規約・プライバシーポリシー
- レスポンシブデザイン対応

## 技術スタック

### フロントエンド
- React
- TypeScript
- SCSS (FLOCSS設計)
- Webpack + Babel
- Inertia.js

### バックエンド
- Laravel 11
- Breeze (認証)
- MySQL
- Eloquent ORM

### 開発環境
- Node.js
- npm/yarn
- Git

## 開発のポイント

### 1. モダンな技術スタックの採用

Laravel 11とReact、TypeScriptを組み合わせることで、堅牢で保守性の高いコードベースを実現しました。特にInertia.jsの採用により、従来のSPAの利点を活かしながら、Laravel側でのルーティングやセッション管理を自然に行うことができました。

### 2. FLOCSSによるCSS設計

CSSフレームワークを使用せず、FLOCSSの設計思想に基づいてスタイリングを実装しました。これにより：
- コンポーネントの再利用性の向上
- 保守性の高いCSS構造の実現
- パフォーマンスの最適化
を達成しています。

### 3. セキュリティ対策

- CSRF対策
- XSS対策
- SQLインジェクション対策
- 認証・認可の適切な実装
などのセキュリティ対策を徹底的に実装しています。

### 4. レスポンシブデザイン

スマートフォンでの利用を考慮し、完全レスポンシブ対応を実現。ブレークポイントを適切に設定し、どのデバイスでも最適な表示・操作性を提供しています。

## 実装で工夫した点

### 1. メッセージング機能の最適化

パブリックメッセージとダイレクトメッセージの2種類のメッセージング機能を実装。特に以下の点に注力しました：
- リアルタイムな更新
- 既読管理システム
- メッセージスレッドの整理
- 会話グループの自動生成

### 2. お気に入り機能の実装

ユーザーが気になる案件をブックマークできる機能を実装：
- ワンクリックでの追加・削除
- お気に入り一覧ページ
- 視覚的に分かりやすいハートアイコン
- Ajax通信による非同期処理

### 3. メモ機能の実装

各会話グループに対して個人的なメモを残せる機能：
- 会話ごとの独立したメモ
- リアルタイム保存
- 1000文字までの制限
- プライベートな情報管理

### 4. 通知システムの構築

Laravel標準の通知機能を活用：
- 応募受信通知
- メッセージ受信通知
- 未読通知数の表示
- 一括既読機能

### 5. 案件検索の効率化

- 案件種別（単発/レベニューシェア）による絞り込み
- カテゴリーによる検索
- キーワード検索
- ページネーション対応
これらの検索機能をフロントエンド側でも最適化し、ストレスのない検索体験を実現しています。

### 6. データベース設計

- 適切なリレーション設計
- インデックス最適化
- N+1問題の解決
- トランザクション処理の実装
により、パフォーマンスと信頼性を確保しています。

### 7. コンポーネント設計

React側では再利用可能なコンポーネントを設計：
- `FavoriteButton`コンポーネント
- メッセージ関連コンポーネント
- フォーム関連コンポーネント
- レイアウトコンポーネント

## 技術的な挑戦

### 1. Inertia.jsの活用

従来のSPAとサーバーサイドレンダリングの良いとこ取りを実現：
- ページ遷移の高速化
- SEO対策
- Laravel側でのルーティング管理
- 状態管理の簡素化

### 2. TypeScriptの型安全性

フロントエンド全体でTypeScriptを採用：
- 型安全なAPI通信
- コンポーネントのProps型定義
- 開発時のエラー検出
- コードの可読性向上

### 3. SCSS + FLOCSS設計

保守性の高いCSS設計を実現：
- Foundation（基盤）
- Layout（レイアウト）
- Object（オブジェクト）
  - Component（再利用可能な部品）
  - Project（プロジェクト固有の部品）
  - Utility（汎用クラス）

## 今後の展望

1. **リアルタイム通知機能の強化**
   - WebSocketを使用したリアルタイム通信
   - プッシュ通知の実装

2. **AIを活用したマッチング精度の向上**
   - スキルマッチングアルゴリズム
   - おすすめ案件の提案

3. **決済機能の実装**
   - Stripe連携
   - エスクロー機能

4. **レビュー・評価システムの導入**
   - 案件完了後の相互評価
   - 信頼度スコア

5. **パフォーマンス最適化**
   - キャッシュ機能の強化
   - 画像最適化
   - CDN導入

## まとめ

本プロジェクトでは、モダンな技術スタックを活用しながら、シンプルで使いやすいエンジニアマッチングサービスを実現することができました。特に、Laravel 11とReact、TypeScriptの組み合わせは、開発効率と保守性の両面で大きな利点がありました。

お気に入り機能やメモ機能、通知システムなど、ユーザビリティを向上させる機能も充実させることで、単なる案件マッチングサービスを超えた、使いやすいプラットフォームを構築できました。

今後も、ユーザーフィードバックを積極的に取り入れながら、機能の改善と拡張を続けていく予定です。

## 参考リンク
- Laravel 11 公式ドキュメント: https://laravel.com/docs/11.x
- React 公式ドキュメント: https://react.dev/
- Inertia.js: https://inertiajs.com/
- FLOCSS: https://github.com/hiloki/flocss
- TypeScript: https://www.typescriptlang.org/ 